package org.xillium.core.util;

import java.util.Map;
import org.xillium.core.*;
import org.xillium.data.*;
import org.xillium.data.validation.*;
import org.xillium.data.persistence.Persistence;


/**
 * A simple proxy service that redirects requests to other remote services via a lookup mechanism based on request data.
 */
@lombok.extern.log4j.Log4j2
public class ProxyService extends ExtendableAndSecured {
    private String _service;
    private Map<String, String> _servers;
    private String _selector;
    private String _error;

    /**
     * Looks up server URL based on request parameters in the data binder.
     *
     * The default implementation uses a servers looup map and a selector parameter. You may choose not to use a selector if the
     * lookup map contains only 1 entry.
     *
     * @return the URL to a remote server, or null if lookup fails
     */
    protected String lookupServerURL(DataBinder binder) {
        _log.info("STANDARD lookupServerURL: servers={}, selector='{}'", _servers, _selector);
        if (_servers != null) {
            if (_selector != null) {
                return _servers.get(binder.get(_selector));
            } else if (_servers.size() == 1) {
                return _servers.values().iterator().next();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    /**
     * Specifies the target service to redirect to.
     */
    public void setService(String service) {
        _service = service;
    }

    /**
     * Specifies a servers map on which a server URL lookup can be performed.
     */
    public void setServers(Map<String, String> servers) {
        _servers = servers;
    }

    /**
     * Specifies the name of the selector parameter.
     */
    public void setSelector(String selector) {
        _selector = selector;
    }

    /**
     * Specifies the server lookup error message format. The error message is generated by
     * <pre>
     *      String.format(lookupErrorMessage, binder.get(selector))
     * </pre>
     */
    public void setLookupErrorMessage(String error) {
        _error = error;
    }

    public DataBinder run(DataBinder binder, Reifier dict, Persistence persist) throws ServiceException {
		try {
            String url = lookupServerURL(binder);
            _log.info("lookupServerURL: {}", url);
            if (url != null) {
                binder.put(SERVICE_JSON_TUNNEL, new String(RemoteService.call(url, _service, binder).body, "UTF-8"));
            } else {
                if (_error != null) {
                    throw new ServiceException(String.format(_error, binder.get(_selector)));
                } else {
                    throw new ServiceException("TargetServerNotAvailable");
                }
            }
		} catch (ServiceException x) {
			throw x;
		} catch (Exception x) {
			throw new ServiceException(x.getMessage(), x);
		}
        return binder;
    }
}
